#include "fenetre.h"
#include <iostream>

Fenetre::Fenetre() : QMainWindow()
{
    //initialisation de nbReine et solution
    nDames=0;
    nbSol=0;
    resultat.clear();

    //Definition de la fenetre
    setFixedSize(1000, 800);

    //Definition de quitter
    QMenu *menuFichier = menuBar()->addMenu("&Fichier");
    QAction *actionQuitter = new QAction("&Quitter", this);
    menuFichier->addAction(actionQuitter);

    connect(actionQuitter, SIGNAL(triggered()), qApp, SLOT(quit()));

    //Definion comboBox
    listeAlgo = new QComboBox();
    listeAlgo->addItem("");
    listeAlgo->addItem("Generate&Test");
    listeAlgo->addItem("Backtrack");
    listeAlgo->addItem("ForwardChecking");
    listeAlgo->addItem("rechercheLocale");

    //tuto site du zero
    m_lcd = new QLCDNumber(this);
    m_lcd->setSegmentStyle(QLCDNumber::Flat);
    m_lcd->move(20, 20);
    m_lcd->setFixedSize(250,150);

    m_slider = new QSlider(Qt::Horizontal, this);
    m_slider->setGeometry(10, 60, 100, 20);
    m_slider->setRange(4,10);
    m_slider->setValue(4);

    QObject::connect(m_slider, SIGNAL(valueChanged(int)), m_lcd, SLOT(display(int))) ;
    QObject::connect(m_slider, SIGNAL(valueChanged(int)), this, SLOT(changerNbDames(int))) ;

    //Definir parametre cote
    parametreDivers = new QVBoxLayout;
    parametreDivers->addWidget(listeAlgo);
    parametreDivers->addWidget(m_lcd);
    parametreDivers->addWidget(m_slider);
    lancerAlgo = new QPushButton("Lancer");
    QObject::connect(lancerAlgo,SIGNAL(clicked()),this, SLOT(faireTourner())) ;
    parametreDivers->addWidget(lancerAlgo);
    reculer = new QPushButton("precedent");
    QObject::connect(reculer, SIGNAL(clicked()), this, SLOT(rPrecedent())) ;
    avancer = new QPushButton("suivant");
    QObject::connect(avancer, SIGNAL(clicked()), this, SLOT(rSuivant())) ;
    effacer = new QPushButton("effacer");
    QObject::connect(effacer, SIGNAL(clicked()), this, SLOT(rEffacer())) ;
    parametreDivers->addWidget(reculer);
    parametreDivers->addWidget(avancer);
    parametreDivers->addWidget(effacer);
    //Definition widget central
    zoneCentrale = new QWidget;
    tableauEtParametre= new QHBoxLayout;
    echequier =new Echequier();
    tableauEtParametre->addLayout(parametreDivers);
    tableauEtParametre->addWidget(echequier);

    zoneCentrale->setLayout(tableauEtParametre);
    setCentralWidget(zoneCentrale);
}

Fenetre::Fenetre(int largeur,int hauteur) : QMainWindow()
{
//A faire pour une taille donnée
}

void Fenetre::changerNbDames(int val)
{
   nDames=val;  
   delete echequier;
   echequier= new Echequier(nDames);
   tableauEtParametre->addWidget(echequier);

}

int Fenetre::getNbDames()
{
    return nDames;
}

void Fenetre::faireTourner()
{
    AfficheSolution(listeAlgo->currentText());
}

void Fenetre::rPrecedent(){

    nbSol--;
    if (nbSol>=0){
        delete echequier;
        echequier= new Echequier(nDames);
        tableauEtParametre->addWidget(echequier);
        resultat = listeResultat[nbSol];
        std::cout << std::endl;

        for(int i = 0; i<nDames*nDames; i++){
            if(resultat[i]==1)echequier->placerReine(i);
            else echequier->placerVide(i);
        }
    }
    else nbSol=0;
}

void Fenetre::rSuivant(){

    nbSol++;
    if (nbSol<listeResultat.size()){
        delete echequier;
        echequier= new Echequier(nDames);
        tableauEtParametre->addWidget(echequier);
        resultat = listeResultat[nbSol];
        std::cout << std::endl;

        for(int i = 0; i<nDames*nDames; i++){
            if(resultat[i]==1)echequier->placerReine(i);
            else echequier->placerVide(i);
        }
    }
    else nbSol=listeResultat.size();
}

void Fenetre::rEffacer(){

    delete echequier;
    echequier= new Echequier(nDames);
    tableauEtParametre->addWidget(echequier);
}

void Fenetre::AfficheSolution(QString typeAlgo)
{

    if(typeAlgo=="");
    else{
         resultat.clear();
         listeResultat.clear();
         nbSol=0;
        if (typeAlgo=="Backtrack")
    {
        //Réalise l'algo backtrack
        std::cout<<getNbDames()<<std::endl;
        Backtrack *bt = new Backtrack(getNbDames());


        listeResultat = bt->getNbSol();
        resultat = listeResultat[nbSol];
        std::cout << std::endl;

        for(int i = 0; i<bt->getNbReine()*bt->getNbReine() ; i++){
            std::cout << resultat[i] << "|";
            if((i+1)%bt->getNbReine() == 0 )
                std::cout << std::endl;
            if(resultat[i]==1)echequier->placerReine(i);
            else echequier->placerVide(i);
        }

    }
        else if (typeAlgo=="ForwardChecking")
                {
                    //Réalise l'algo forwardchecking
                    ForwardChecking *fc = new ForwardChecking(getNbDames());


                    listeResultat = fc->getNbSol();
                    resultat = listeResultat[nbSol];
                    std::cout << std::endl;

                    for(int i = 0; i<fc->getNbReine()*fc->getNbReine() ; i++){
                        std::cout << resultat[i] << "|";
                        if((i+1)%fc->getNbReine() == 0 )
                            std::cout << std::endl;
                        if(resultat[i]==1)echequier->placerReine(i);
                        else echequier->placerVide(i);
                    }
                }

                else if (typeAlgo=="Generate&Test")
                        {
                            std::cout<<typeAlgo.toStdString()<<std::endl;
                            //Réalise l'algo generate and test
                            GenerateAndTest *gt = new GenerateAndTest(getNbDames());

                            listeResultat = gt->getNbSol();
                            resultat = listeResultat[nbSol];
                            std::cout << std::endl;

                            for(int i = 0; i<gt->getNbReine()*gt->getNbReine() ; i++){
                                std::cout << resultat[i] << "|";
                                if((i+1)%gt->getNbReine() == 0 )
                                    std::cout << std::endl;
                                if(resultat[i]==1)echequier->placerReine(i);
                                else echequier->placerVide(i);
                            }
                        }
        else if (typeAlgo=="rechercheLocale")
                {
                    std::cout<<typeAlgo.toStdString()<<std::endl;
                    //Réalise l'algo recherche locale
                    QVector<int> positionReine;
                    positionReine.clear();
                    int aleatoire=0;
                    for(int i=0; i<nDames; i++){
                        positionReine.push_back(aleatoire);
                        aleatoire=++aleatoire;
                    }
                    RechercheLocal *rl = new RechercheLocal(getNbDames(),positionReine);

                   // listeResultat = rl->getNbSol();
                    if (!listeResultat.empty())
                    {
                        resultat = listeResultat[nbSol];
                        std::cout << std::endl;

                        for(int i = 0; rl->getNbReine()*rl->getNbReine() ; i++){
                            std::cout << resultat[i] << "|";
                            if((i+1)%rl->getNbReine() == 0 )
                                std::cout << std::endl;
                            if(resultat[i]==1)echequier->placerReine(i);
                            else echequier->placerVide(i);
                        }
                    }
                 }
    }
}

